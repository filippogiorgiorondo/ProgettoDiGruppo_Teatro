import funzionidb as db
import time
conn = db.connetti_db()
db.crea_e_popola_tabelle(conn)
# ======================= PIANTINA TEATRO ============================================
def piantina():
    # Dimensioni della sala
    ROWS = 3       # Numero di file (B, M, V)
    COLS = 10      # Numero di posti per fila

    # Funzione per generare il countdown in sequenza
    def countdown(start, length):
        return [str(start - i) for i in range(length)]

    def mostra_piantina_teatro():
        cell_w = 10  # larghezza cella
        cell_h = 3   # altezza cella

        border = "+" + ("-" * cell_w + "+") * COLS

        print("\nüé≠ Piantina dei posti del teatro üé≠\n")
        
        # Countdown per le righe
        countdown_bm = countdown(20, COLS)  # Countdown per la riga B e M
        countdown_v = countdown(10, COLS)  # Countdown per la riga V
        
        # Mappa dei posti con le lettere di riga (B, M, V)
        main_map = [
            ['B'] * COLS,  # Prima riga (B)
            ['M'] * COLS,  # Seconda riga (M)
            ['V'] * COLS,  # Terza riga (V)
        ]
        
        # Inizializziamo un indice per il countdown
        current_count = 20

        for i, row in enumerate(main_map):
            print(border)
            for line in range(cell_h):
                row_str = ""  # Inizializzo la stringa per la riga
                for j in range(COLS):
                    if i == 0:  # Per la riga B
                        if line == 1:
                            content = f" {row[j]} {current_count} ".center(cell_w)  # Aggiungi lettera e numero
                            current_count -= 1
                        else:
                            content = " " * cell_w
                    elif i == 1:  # Per la riga M (continua da 19 a 10)
                        if line == 1:
                            content = f" {row[j]} {current_count} ".center(cell_w)  # Aggiungi lettera e numero
                            current_count -= 1
                        else:
                            content = " " * cell_w
                    elif i == 2:  # Per la riga V (con countdown da 10)
                        if line == 1:
                            current_count = 10  # Resetta il countdown a 10 per la riga V
                            content = f" {row[j]} {current_count} ".center(cell_w)  # Aggiungi lettera e numero
                            current_count -= 1
                        else:
                            content = " " * cell_w
                    row_str += f"|{content}"
                row_str += "|"
                print(row_str)
        print(border)
    mostra_piantina_teatro()
    print("\n===============================================Il palco √® qui===============================================\n")

# ===================================== CLASSE GENITORE ============================================
class Posto:
    def __init__(self, numero, fila, nome_prenotazione, occupato=False):
        self._numero = numero
        self._fila = fila
        self._occupato = occupato
        self.nome_prenotazione = nome_prenotazione

    def get_numero(self):
        return self._numero

    def set_numero(self, numero):
        self._numero = numero

    def get_fila(self):
        return self._fila

    def set_fila(self, fila):
        self._fila = fila

    def get_occupato(self):
        return self._occupato

    def set_occupato(self, occupato):
        if isinstance(occupato, bool):
            self._occupato = occupato
        else:
            print("Valore non valido per occupato. Deve essere True o False.")

    def prenota(self):
        if not self.get_occupato():
            self.set_occupato(True) 
            print("Posto prenotato")
            # nelle specializzazioni √® presente la query per settare la prenotazione del posto
        else:
            print("Posto gi√† prenotato")

    def libera(self):
        if self.get_occupato():
            self.set_occupato(False) 
            print("Posto liberato")
            # nelle specializzazioni √® presente la query per settare la liberazione di un posto
        else:
            print("Il posto era gi√† libero")

# ===================================== CLASSE POSTO VIP ===========================================
class PostoVip(Posto):
    # Costruttore: eredita gli attributi dalla superclasse Posto e inizializza i servizi VIP
    def __init__(self, numero, fila, nome_prenotazione, occupato=False):
        super().__init__(numero, fila, nome_prenotazione, occupato)
        self.servizi = ["accesso_lounge", "servizio_in_posto", "regalo_benvenuto"]

    # Metodo per prenotare un posto VIP e aggiungere eventuali servizi extra
    def prenota(self, id):
        self._occupato = True  # Segna il posto come occupato
        importo = 50.0  # Prezzo base per il posto VIP

        scelta = input("‚ú® Vuoi aggiungere servizi extra per 20$ ciascuno? (s/n): ").lower().strip()
        if scelta == "s":
            print("\nüìã --- Menu Servizi VIP ---")
            for i, servizio in enumerate(self.servizi, start=1):
                print(f"{i}. {servizio}")

            while True:
                try:
                    ch = int(input("üëâ Inserisci il numero del servizio da aggiungere: "))

                    match ch:
                        case 1:
                            nome_servizio = self.servizi[0]
                        case 2:
                            nome_servizio = self.servizi[1]
                        case 3:
                            nome_servizio = self.servizi[2]
                        case _:
                            print("‚ùå Selezione non valida. Riprova.")
                            continue

                    # Verifica disponibilit√† del servizio prima di prenotarlo
                    disponibile = db.verifica_servizio_vip(conn, nome_servizio)
                    if disponibile:
                        importo += 20  # Aggiunge il costo del servizio all'importo totale
                        db.prenota_servizio_vip(conn, self.get_numero(), nome_servizio, importo)
                        print(f"‚úÖ Servizio aggiunto: '{nome_servizio}'")
                    else:
                        print(f"‚ö†Ô∏è Il servizio '{nome_servizio}' non √® disponibile al momento.")

                except ValueError:
                    print("‚ö†Ô∏è Inserisci un numero valido.")

                continua = input("‚ûï Vuoi aggiungere un altro servizio? (s/n): ").lower().strip()
                if continua != "s":
                    break

        # Mostra il totale al termine della prenotazione
        print(f"\nüéüÔ∏è Prenotazione completata. Totale da pagare: üíµ {importo:.2f}$")


# ===================================== CLASSE POSTO PLEBE =========================================
class PostoPlebe(Posto):
    # Costruttore: eredita gli attributi dalla classe madre Posto
    def __init__(self, numero, fila, nome_prenotazione, occupato=False):
        super().__init__(numero, fila, nome_prenotazione, occupato)

    # Metodo per prenotare un posto plebe
    def prenota(self, posto):
        try:
            if posto:
                costo = self.calcola_costo()  # Calcola il costo del posto in base alla posizione
                print(f"‚úÖ Posto plebe prenotato con successo! Prezzo: üí∞ {costo}$")
                self.set_occupato(True)  # Segna il posto come occupato
            else:
                print("‚ùå Il posto risulta gi√† prenotato.")
        except Exception as e:
            print(f"‚ö†Ô∏è Errore durante la prenotazione del posto plebe: {e}")

    # Metodo per calcolare il costo del posto in base alla numerazione
    def calcola_costo(self):
        numero = self.get_numero()  # Ottiene il numero del posto
        if 1 <= numero <= 10:
            return 20.0  # Prezzo per i posti in fila M (centrali)
        elif 11 <= numero <= 20:
            return 10.0  # Prezzo ridotto per i posti in fila B (ultimi)
        else:
            print("‚ùå Numero posto non valido (deve essere tra 1 e 20).")
            return 0.0  # Ritorna 0 in caso di numero fuori range

    
# ======================================================= CLASSE TEATRO =================================================================
class Teatro:
    def __init__(self):
        # Dizionario privato per tenere traccia degli oggetti Posto associati agli ID
        self.__lista = {}
        
    def setter_aggiungi(self, id_posto, posto_obj):
        # Aggiunge un oggetto Posto alla lista in base all'ID
        self.__lista[id_posto] = type(posto_obj)
        
    def setter_togli(self, id_posto):
        # Rimuove un oggetto Posto dalla lista in base all'ID
        del self.__lista[id_posto]
        
    def getter_lista(self):
        # Stampa la lista attuale delle prenotazioni, se presente
        if self.__lista != {}:
            print("\nüìã Lista prenotazioni attuali:")
            for chiave, valore in self.__lista.items():
                print(f"ü™ë Posto ID {chiave}: tipo {valore.__name__}")
        else:
            print("\nüì≠ Nessuna prenotazione attiva al momento.")

    def menu(self):
        # Menu interattivo per la gestione del teatro
        while True:
            print("\nüé≠ MENU TEATRO")
            print("1Ô∏è‚É£  Visualizza posti plebe disponibili")
            print("2Ô∏è‚É£  Visualizza posti VIP disponibili")
            print("3Ô∏è‚É£  Prenota posto plebe")
            print("4Ô∏è‚É£  Prenota posto VIP")
            print("5Ô∏è‚É£  Cancella prenotazione plebe")
            print("6Ô∏è‚É£  Cancella prenotazione VIP")
            print("7Ô∏è‚É£  Verifica stato servizio VIP")
            print("8Ô∏è‚É£  Prenota servizio VIP")
            print("9Ô∏è‚É£  Rimuovi servizio VIP")
            print("üîü  Esci")

            scelta = input("üëâ Seleziona un'opzione (1-10): ")
            
            match scelta:
                case "1":
                    # Visualizza i posti plebe disponibili
                    db.posti_disponibili_plebe(conn)

                case "2":
                    # Visualizza i posti VIP disponibili
                    db.posti_disponibili_vip(conn)

                case "3":
                    # Prenotazione posto plebe
                    try:
                        id_posto = int(input("üé´ Inserisci ID posto plebe da prenotare (1-20): "))
                        if 1 <= id_posto <= 10:
                            fila = "M"
                        elif 11 <= id_posto <= 20:
                            fila = "B"
                        else:
                            print("‚ùå Posto non disponibile.")
                            continue

                        nome_prenotazione = input("‚úçÔ∏è Nome per la prenotazione: ")
                        if not nome_prenotazione or not nome_prenotazione.isalpha():
                            print("‚ùå Inserisci un nome valido (solo lettere).")
                            continue

                        posto = db.prenota_posto_plebe(conn, id_posto, nome_prenotazione)
                        if posto:
                            posto_obj = PostoPlebe(id_posto, fila, nome_prenotazione)
                            self.setter_aggiungi(id_posto, posto_obj)
                            self.getter_lista()
                            posto_obj.prenota(posto)

                    except ValueError:
                        print("‚ùå Inserisci un numero valido.")

                case "4":
                    # Prenotazione posto VIP
                    try:
                        id_posto = int(input("üé´ Inserisci ID posto VIP da prenotare (1-10): "))
                        if 1 <= id_posto <= 10:
                            fila = "V"
                        else:
                            print("‚ùå Posto VIP non disponibile.")
                            continue

                        nome_prenotazione = input("‚úçÔ∏è Nome per la prenotazione: ")
                        if not nome_prenotazione or not nome_prenotazione.isalpha():
                            print("‚ùå Inserisci un nome valido (solo lettere).")
                            continue

                        posto = db.prenota_posto_vip(conn, id_posto, nome_prenotazione)
                        if posto:
                            posto_obj = PostoVip(id_posto, fila, nome_prenotazione)
                            self.setter_aggiungi(id_posto, posto_obj)
                            self.getter_lista()
                            posto_obj.prenota(id_posto)

                    except ValueError:
                        print("‚ùå Inserisci un numero valido.")

                case "5":
                    # Cancellazione prenotazione plebe
                    try:
                        id_posto = int(input("üóëÔ∏è Inserisci ID del posto plebe da cancellare: "))
                        nome = input("‚úçÔ∏è Nome della prenotazione: ")
                        successo = db.cancella_prenotazione_plebe(conn, id_posto, nome)
                        if successo:
                            try:
                                self.setter_togli(id_posto)
                                self.getter_lista()
                            except KeyError:
                                print("‚ÑπÔ∏è Il posto non era nella lista corrente.")
                    except ValueError:
                        print("‚ùå Inserisci un numero valido.")

                case "6":
                    # Cancellazione prenotazione VIP
                    try:
                        id_posto = int(input("üóëÔ∏è Inserisci ID del posto VIP da cancellare: "))
                        nome = input("‚úçÔ∏è Nome della prenotazione: ")
                        successo = db.cancella_prenotazione_vip(conn, id_posto, nome)
                        if successo:
                            try:
                                self.setter_togli(id_posto)
                                self.getter_lista()
                            except KeyError:
                                print("‚ÑπÔ∏è Il posto non era nella lista corrente.")
                    except ValueError:
                        print("‚ùå Inserisci un numero valido.")

                case "7":
                    # Verifica disponibilit√† di un servizio VIP
                    try:
                        servizio = input("üîç Servizio da verificare (accesso_lounge, servizio_in_posto, regalo_benvenuto): ").strip()
                        disponibile = db.verifica_servizio_vip(conn, servizio)
                        if disponibile:
                            print("‚úÖ Servizio disponibile!")
                        else:
                            print("‚ö†Ô∏è Servizio non disponibile o inesistente.")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Errore: {e}")

                case "8":
                    # Prenota un servizio VIP
                    try:
                        id_posto = int(input("üé´ Inserisci ID posto VIP: "))
                        servizio = input("üßæ Servizio da prenotare: ").strip()
                        importo = db.ottieni_importo(conn, id_posto)
                        if importo is not None:
                            importo += 20  # Aggiunta costo servizio
                            db.prenota_servizio_vip(conn, id_posto, servizio, importo)
                            print("‚úÖ Servizio aggiunto con successo.")
                        else:
                            print("‚ùå Impossibile prenotare il servizio.")
                    except ValueError:
                        print("‚ùå Inserisci un numero valido.")

                case "9":
                    # Rimuove un servizio VIP
                    try:
                        id_posto = int(input("üóëÔ∏è Inserisci ID posto VIP: "))
                        servizio = input("‚úÇÔ∏è Servizio da rimuovere: ").strip()
                        db.disattiva_servizio_vip(conn, id_posto, servizio)
                        print("‚úÖ Servizio rimosso correttamente.")
                    except ValueError:
                        print("‚ùå Inserisci un numero valido.")

                case "10":
                    # Uscita dal menu
                    print("üëã Arrivederci e grazie per aver gestito il Teatro con noi!")
                    return
                    
                case _:
                    # Scelta non valida
                    print("‚ùå Scelta non riconosciuta. Riprova.")


# ===================================================== INIZIALIZZO IL GESTORE TEATRO ==============================================================
teatro = Teatro()
piantina()
teatro.menu()

# =================================================== CLASSE SPETTACOLO TEATRALE ===================================================================
class Spettacolo:
    
    # Inizializza lo spettacolo con titolo, durata e connessione al DB
    def __init__(self, titolo, durata_minuti, conn):
        self.titolo = titolo
        self.durata_minuti = durata_minuti
        self.conn = conn
        print(f"\nüé≠ Benvenuto a '{self.titolo}'! Durata: {self.durata_minuti} minuti.\n")

    # Ottiene e stampa le info del vicino di posto
    def chiacchiera_con_vicino(self, id_posto):
        vicini = db.get_posto_vicino(self.conn, id_posto)
        if vicini:
            for vicino in vicini:
                print(f"üó£Ô∏è Vicino al posto #{vicino['id']}: ¬´{vicino['nome_prenotazione']}¬ª. Due chiacchiere volano via!")
        else:
            print("ü§ê Nessun vicino accanto a te. Silenzio e concentrazione...")

    # Controlla se √® disponibile il servizio in posto
    def usufruisci_servizio_in_posto(self, id_posto):
        if db.has_servizio_in_posto(self.conn, id_posto):
            print("üç∑ Il cameriere arriva silenziosamente... ecco uno snack raffinato e una bevanda fresca!")
        else:
            print("üö´ Ops! Il servizio in posto non √® disponibile per questo biglietto.")

    # Simula lo spettacolo e le interazioni con l'utente
    def simula_spettacolo(self, id_posto):
        print(f"\nüé¨ Preparati... lo spettacolo '{self.titolo}' sta per iniziare!")
        momenti = {
            0: "‚ú® Le luci si abbassano... silenzio in sala.",
            30: "üõë Intervallo! Un momento perfetto per socializzare.",
            60: "üçø Snack time! Il servizio in posto prende vita.",
            self.durata_minuti: "üéâ Applausi! Lo spettacolo √® giunto al termine."
        }

        for minuto in range(0, self.durata_minuti + 1, 30):
            print(f"\n‚è±Ô∏è Minuto {minuto} - {momenti.get(minuto, 'üé≠ La scena continua...')}")
            
            if minuto == 30:
                input("üëâ Premi Invio per parlare col vicino...")
                self.chiacchiera_con_vicino(id_posto)

            elif minuto == 60:
                input("üëâ Premi Invio per usufruire del servizio in posto...")
                self.usufruisci_servizio_in_posto(id_posto)

            elif minuto == self.durata_minuti:
                print("üëè Grazie per averci accompagnato in questa avventura teatrale!")

            time.sleep(2)  # Simulazione del tempo (accorciato per test)


# ========================================================== MENU SPETTACOLO INTERATTIVO ============================================
def menu(spettacolo: Spettacolo):
    # Menu interattivo per l'utente
    while True:
        print("\nüìú MENU INTERATTIVO SPETTACOLO")
        print("1Ô∏è‚É£  Chiacchiera con il vicino")
        print("2Ô∏è‚É£  Usufruisci del servizio in posto")
        print("3Ô∏è‚É£  Simula spettacolo")
        print("4Ô∏è‚É£  Esci")
        scelta = input("üëâ Scegli un'opzione (1-4): ")

        match scelta:
            # Opzione per parlare col vicino
            case "1":
                try:
                    id_posto = int(input("üî¢ Inserisci il tuo ID posto VIP: "))
                    spettacolo.chiacchiera_con_vicino(id_posto)
                except ValueError:
                    print("‚ö†Ô∏è Inserisci un numero valido per l'ID posto.")

            # Opzione per usufruire del servizio in posto
            case "2":
                try:
                    id_posto = int(input("üî¢ Inserisci il tuo ID posto VIP: "))
                    spettacolo.usufruisci_servizio_in_posto(id_posto)
                except ValueError:
                    print("‚ö†Ô∏è Inserisci un numero valido per l'ID posto.")

            # Opzione per simulare lo spettacolo
            case "3":
                try:
                    id_posto = int(input("üî¢ Inserisci il tuo ID posto VIP: "))
                    spettacolo.simula_spettacolo(id_posto)
                except ValueError:
                    print("‚ö†Ô∏è Inserisci un numero valido per l'ID posto.")

            # Uscita dal programma
            case "4":
                print("üëã Grazie per essere stato con noi! A presto tra le poltrone rosse del teatro.")
                break

            case _:
                print("‚ùå Scelta non valida. Riprova con un numero da 1 a 4.")

                
if __name__ == "__main__":
    conn = db.connetti_db()
    if conn:
        spettacolo = Spettacolo("Romeo e Giulietta", 135, conn)
        menu(spettacolo)
        conn.close()


